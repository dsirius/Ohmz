// -------------
// START >> INIT
// -------------

// Enable download plugin.
plugins {
  id "de.undercouch.download" version "2.0.0"
}
apply plugin: 'java'

// Set build number to default if environment variable does not exist.
if (System.getenv("BUILD_NUMBER") != null)
{
    ext.pack_version = "${packVersionMajor}.${packVersionMinor}.${System.getenv().BUILD_NUMBER}"
}
else
{
    ext.pack_version = "${packVersionMajor}.${packVersionMinor}.${packNonJenkinsBuild}"
}

// Define variables for fastcraft.
def fastcraftURL = "http://files.player.to/fastcraft-${fastcraftVersion}.jar"
def fastcraftOutput = "output/fastcraft-${fastcraftVersion}.jar"
def fastcraftInOutput = "fastcraft-${fastcraftVersion}.jar"

// -----------------
// RUN DEFAULT TASKS
// -----------------

if (file(fastcraftOutput).isFile())
{
    defaultTasks "cleanup", "omhzclient", "ohmzserver", "ohmzSolder-config-client", "omhzSolder-config-server", "unzipClient", "unzipServer"
}
else
{
    defaultTasks "cleanup", "downloadFastcraft", "omhzclient", "ohmzserver", "ohmzSolder-config-client", "omhzSolder-config-server", "unzipClient", "unzipServer"
}

// -------------------------------
// TASK: CLEAN UP OUTPUT DIRECTORY
// -------------------------------

task ("cleanup", type: Delete)
{
  delete fileTree(dir: "output", exclude: fastcraftInOutput)
}

// ------------------------
// TASK: DOWNLOAD FASTCRAFT
// ------------------------

import de.undercouch.gradle.tasks.download.Download

task ("downloadFastcraft", type: Download)
{
    src fastcraftURL
    dest fastcraftOutput
}

// ------------------------
// TASK: BUILD VOLTZ CLIENT
// ------------------------

task ("omhzclient", type: Zip)
{
    group = 'modpack'
    description = 'Builds a Voltz client modpack zip'

    // Grab all the files that make up a client installation.
    from('.')
    {
        include 'bin/**'
        include 'config/**'
        include 'coremods/**'
        include 'resourcepacks/**'
        include 'texturepacks/**'
        include 'libraries/**'
        include 'mods/**'
        include 'scripts/**'
        include 'Flan/**'
    }
    
    // Copy submodule configs into config folder.
    into('config') {from fileTree('Configs/config')}
    into('scripts') {from fileTree('Configs/scripts')}
    into('config') {from fileTree('Configs/clientconfig')}
    
    // Copy over default server for multiplayer menu.
    from('./clientextra')
    {
        include '**/*.dat'
    }

    // Copy over client only mods into mods folder.
    into('mods'){ from fileTree('clientmods') }
    
    // Copy over fastcraft into mods folder.
    //into('mods'){ from fastcraftOutput}
    
    // Replace the CustomBranding config with our version information.
    //String contents = new File( 'clientbranding/CustomBranding.cfg' ).getText( 'UTF-8' )
    //contents = contents.replaceAll( '@VERSION@', pack_version )
    
    // Create the new file that will take its place.
    //new File( 'config/CustomBranding.cfg' ).write(contents, 'UTF-8' )
    
    // Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // Info output.
    eachFile { file -> logger.lifecycle "packing $file" }

    // Create base filename for our creation.
    destinationDir = file 'output'
    baseName = "./${archivesBaseName}-$pack_version-client"

    // Log creation of client zip.
    doLast { logger.lifecycle "Ohmz Client Created: $archivePath" }
}

// ------------------------
// TASK: BUILD VOLTZ SERVER
// ------------------------

task ("ohmzserver", type: Zip)
{
    group = 'modpack'
    description = 'Builds a Ohmz server modpack zip'

    // Grab all the files that makeup a server installation.
    from('.')
    {
        include 'config/**'
        include 'coremods/**'
        include 'mods/**'
        include 'libraries/**'
        include 'scripts/**'
        include 'Flan/**'
    }
    
    // Copy submodule configs into config folder.
    into('config') {from fileTree('Configs/config')}
    into('scripts') {from fileTree('Configs/scripts')}
    into('config') {from fileTree('Configs/serverconfig')}
    
    // Copy over server only mods.
    into('mods'){ from fileTree('servermods') }
    
    // Copy over fastcraft into mods folder.
    into('mods'){ from fastcraftOutput}
    
    // Copy over MC server properties, whitelists, scripts, etc.
    from('./serverextra')
    {
        include '**/**'
    }
    
    // Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }

    // Create base filename for our creation.
    destinationDir = file 'output'
    baseName = "./${archivesBaseName}-$pack_version-server"

    // Log creation of server zip.
    doLast { logger.lifecycle "ohmz Server Created: $archivePath" }
}

// --------------------------------
// TASK: BUILD VOLTZ CLIENT CONFIGS
// --------------------------------

task ("ohmzSolder-config-client", type: Zip)
{
    group = 'modpack'
    description = 'Builds a Ohmz Solder client configs zip'
    
    // Grab all the files that makeup a server installation.
    from('.')
    {
        include 'config/**'
    }

    // Copy submodule configs into config folder.
    into('config') {from fileTree('Configs/config')}
    into('scripts') {from fileTree('Configs/scripts')}
    into('config') {from fileTree('Configs/clientconfig')}
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    // Create base filename for our creation.
    destinationDir = file 'output'
    baseName = "./z-${archivesBaseName}-client-configs-$pack_version"
}

// --------------------------------
// TASK: BUILD VOLTZ SERVER CONFIGS
// --------------------------------

task ("omhzSolder-config-server", type: Zip)
{
    group = 'modpack'
    description = 'Builds a Ohmz Solder server configs zip'
    
    // Grab all the files that makeup a server installation.
    from('.')
    {
        include 'config/**'
    }

    // Copy submodule configs into config folder.
    into('config') {from fileTree('ohmz-Configz/config')}
    into('scripts') {from fileTree('ohmz-Configz/scripts')}
    into('config') {from fileTree('ohmz-Configz/serverconfig')}
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    // Create base filename for our creation.
    destinationDir = file 'output'
    baseName = "./z-${archivesBaseName}-server-configs-$pack_version"
}

// ------------------------
// TASK: UNZIP VOLTZ CLIENT
// ------------------------

task ("unzipClient", type: Copy)
{
    from project.zipTree("./output/${archivesBaseName}-${pack_version}-client.zip")
    
    //Determine the destination directory later.
    into ("./output/${archivesBaseName}-$pack_version-client")
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "unpacking $file" }
}

// ------------------------
// TASK: UNZIP VOLTZ SERVER
// ------------------------

task ("unzipServer", type: Copy)
{
    from project.zipTree("./output/${archivesBaseName}-${pack_version}-server.zip")
    
    //Determine the destination directory later.
    into ("./output/${archivesBaseName}-$pack_version-server")
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "unpacking $file" }
}
